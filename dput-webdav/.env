# autoenv script (https://github.com/kennethreitz/autoenv)
if test "$0" = "-bash" -o "$0" = "bash"; then
    _venv_script=$(readlink -f ${BASH_SOURCE[0]})
else
    _venv_script="/dont-know-really/.env"
fi
_venv_xtrace=$(set +o | grep xtrace)
set +x
_venv_name="$(basename $(pwd))"

# command line flags, mostly for CI server usage
_venv_create=false
_venv_develop=false
_venv_pip_log='egrep "Found|Collecting|Installing.collected|Searching.for|Installed|Finished"'
while test "${1:0:1}" = "-"; do
    case "$1" in
        --yes) _venv_create=true ;; # create missing venv without prompting
        --develop) _venv_develop=true ;; # always call "develop -U" on activation
        --verbose | -v) _venv_pip_log=cat ;; # don't filter install logs on terminal
        *) echo "WARNING: Ignored unknown option '$1'" ;;
    esac
    shift
done

# Outside the tree of the .env script?
if pwd | egrep -v '^'$(dirname "$_venv_script")'($|/)' >/dev/null; then
    : echo Outside "[$0 $1 ; $_venv_script]"

# Inside the tree of the .env script, but have another local '.env'?
elif test \! -f .env -o "$_venv_script" != "$(pwd)/.env"; then
    : echo Inside "[$0 $1 ; $_venv_script]"

# Only try virtualenv creation outside of template dirs; the egrep pattern is escaped for hiding it from Jinja2
elif pwd | egrep -v '/{''{''.*''}''}(/|$)' >/dev/null || $_venv_create; then
    test -f ".env" && _venv_ask=true || _venv_ask=false
    for _venv_base in .venv venv . ..; do
        if test -f "$_venv_base/$_venv_name/bin/activate"; then
            deactivate 2>/dev/null || :
            . "$_venv_base/$_venv_name/bin/activate"
            if test -f setup.py; then
                $_venv_develop && python setup.py -q develop -U || :
                python setup.py --name --version --url | tr \\n \\0 \
                    | xargs -0 printf "*** Activated %s %s @ %s\\n" || :
            else
                echo "*** Activated $_venv_base/$_venv_name"
            fi
            _venv_ask=false
            break
        fi
    done

    if $_venv_ask && test \! -d .venv; then
        $_venv_create || { read -p "No virtualenv found, shall I create one for you? [Y/n] " -n 1 -r || REPLY='n'; echo; }
        if $_venv_create || [[ $REPLY =~ ^[Yy]?$ ]]; then
            /usr/bin/virtualenv ".venv/$_venv_name"
            . ".venv/$_venv_name/bin/activate"
            pip --log ".venv/pip-install.log" install -UI pip 2>&1 | $_venv_pip_log
            pip --log ".venv/pip-install.log" install -UI "setuptools>=14.3" "wheel>=0.24.0" 2>&1 | $_venv_pip_log
            pip --log ".venv/pip-install.log" install -r dev-requirements.txt 2>&1 | $_venv_pip_log
            if test -f setup.py; then
                python setup.py develop -U 2>&1 | $_venv_pip_log
                echo
                python setup.py --name --version --author --author-email --license --description --url \
                    | tr \\n \\0 | xargs -0 printf "%s %s by %s <%s> [%s]\\n%s\\n%s\\n" || :
            else
                echo
                if test -f requirements.txt; then
                    echo "*** No 'setup.py' found, installing requirements..."
                    pip --log ".venv/pip-install.log" install -r requirements.txt 2>&1 | $_venv_pip_log
                else
                    echo "*** No 'setup.py' found, all done."
                fi
            fi
        else
            mkdir -p .venv # prevent constant prompting
        fi
    fi
fi

unset _venv_script _venv_name _venv_ask _venv_create _venv_develop _venv_pip_log _venv_base
$_venv_xtrace # restore xtrace state
unset _venv_xtrace
